from MPVisitor import MPVisitor
from MPParser import MPParser
from AST import *

class ASTGeneration(MPVisitor):
    def visitProgram(self,ctx:MPParser.ProgramContext):
        return Program([self.visit(x) for x in ctx.decl()])

    def visitFuncdecl(self,ctx:MPParser.FuncdeclContext):
        local,cpstmt = self.visit(ctx.body()) 
        return FuncDecl(Id(ctx.ID().getText()),
                        [],
                        local,
                        cpstmt,
                        self.visit(ctx.mtype()))

    def visitProcdecl(self,ctx:MPParser.ProcdeclContext):
        local,cpstmt = self.visit(ctx.body()) 
        return FuncDecl(Id(ctx.ID().getText()),
                        [],
                        local,
                        cpstmt)

    def visitBody(self,ctx:MPParser.BodyContext):
        return [],[self.visit(ctx.stmt())] if ctx.stmt() else []
  
    def visitStmt(self,ctx:MPParser.StmtContext):
        return self.visit(ctx.funcall())

    def visitFuncall(self,ctx:MPParser.FuncallContext):
        return CallStmt(Id(ctx.ID().getText()),[self.visit(ctx.exp())] if ctx.exp() else [])

    def visitExp(self,ctx:MPParser.ExpContext):
        return IntLiteral(int(ctx.INTLIT().getText()))

    def visitMtype(self,ctx:MPParser.MtypeContext):
        return IntType()
        




grammar MP;

@lexer::header {
from lexererr import *
}

options{
	language=Python3;
}

program  : decl+ EOF;

decl: funcdecl | procdecl;

procdecl: PROCEDURE ID LB RB SEMI body; 

funcdecl: FUNCTION ID LB RB COLON mtype SEMI body;

body: BEGIN stmt? END  ;

stmt: funcall SEMI;

funcall: ID LB exp? RB ;

exp: INTLIT ;

mtype: INTTYPE;

INTLIT: [0-9]+ ;

LB: '(' ;

RB: ')' ;

SEMI: ';' ;

COLON: ':' ;

WS : [ \t\r\n]+ -> skip ; // skip spaces, tabs, newlines

PROCEDURE: P R O C E D U R E;

FUNCTION: F U N C T I O N;

BEGIN: B E G I N;

END: E N D;

INTTYPE: I N T E G E R;

ID: [a-zA-Z]+ ;

fragment A : [aA];
fragment B : [bB];
fragment C : [cC];
fragment D : [dD];
fragment E : [eE];
fragment F : [fF];
fragment G : [gG];
fragment H : [hH];
fragment I : [iI];
fragment J : [jJ];
fragment K : [kK];
fragment L : [lL];
fragment M : [mM];
fragment N : [nN];
fragment O : [oO];
fragment P : [pP];
fragment Q : [qQ];
fragment R : [rR];
fragment S : [sS];
fragment T : [tT];
fragment U : [uU];
fragment V : [vV];
fragment W : [wW];
fragment X : [xX];
fragment Y : [yY];
fragment Z : [zZ];

ERROR_CHAR: .;


import unittest
from TestUtils import TestAST
from AST import *

class ASTGenSuite(unittest.TestCase):
    def test_simple_program2(self):
       """Simple program: int main() {} """
       input = """function foo(): integer; begin end"""
       expect = str(Program([FuncDecl(Id("foo"),[],[],[],IntType())]))
       self.assertTrue(TestAST.test(input,expect,303))

    def test_simple_program(self):
        """Simple program: int main() {} """
        input = """procedure main(); begin end"""
        expect = str(Program([ProcDecl(Id("main"),[],[],[])]))
        self.assertTrue(TestAST.test(input,expect,300))
    
    def test_simple_function(self):
        """More complex program"""
        input = """function foo ():INTEGER; begin
            putIntLn(4);
        end"""
        expect = str(Program([FuncDecl(Id("foo"),[],[],[CallStmt(Id("putIntLn"),[IntLiteral(4)])],IntType())]))
        self.assertTrue(TestAST.test(input,expect,301))
    
    def test_call_without_parameter(self):
        """More complex program"""
        input = """procedure main (); begin
            getIntLn();
        end
        function foo ():INTEGER; begin
            putIntLn(4);
        end"""
        expect = str(Program([
                FuncDecl(Id("main"),[],[],[CallStmt(Id("getIntLn"),[])]),
                FuncDecl(Id("foo"),[],[],[CallStmt(Id("putIntLn"),[IntLiteral(4)])],IntType())]))
        self.assertTrue(TestAST.test(input,expect,302))
    
    def test_simple_program1(self):
       """Simple program: int main() {} """
       input = """function foo(): integer;
                 begin 
                    a(2)
                 end
                 """
       expect = str(Program([FuncDecl(Id("foo"),[],[],[CallStmt(Id("a"),[IntLiteral(2)])],IntType())]))
       self.assertTrue(TestAST.test(input,expect,304))

    def test_simple_program12(self):
       """Simple program: int main() {} """
       input = """function foo(): integer;
                 begin 
                    a(2);
                    b(2);
                 end
                 """
       expect = str(Program([FuncDecl(Id("foo"),[],[],[CallStmt(Id("a"),[IntLiteral(2)]),CallStmt(Id("b"),[IntLiteral(2)])],IntType())]))
       self.assertTrue(TestAST.test(input,expect,305))
       
       // test case /
       import unittest 
from TestUtils import TestAST 
from AST import * 
class ASTGenSuite(unittest.TestCase):
    def test_var_1(self):
        input = """
            var a:integer;
            """
        expect = str(Program([VarDecl(Id("a"),IntType())]))
        self.assertTrue(TestAST.test(input,expect,1))

    def test_var_2(self):
        input = """
            var a,b:integer;
            """
        expect = str(Program([VarDecl(Id("a"),IntType()),VarDecl(Id("b"),IntType())]))
        self.assertTrue(TestAST.test(input,expect,2))

    def test_var_3(self):
        input = """
            var a:integer;
                b:integer;
            """
        expect = str(Program([VarDecl(Id("a"),IntType()),VarDecl(Id("b"),IntType())]))
        self.assertTrue(TestAST.test(input,expect,3))

    def test_4(self):
        input = """
            var a:integer;
            var b:integer;
            """
        expect = str(Program([VarDecl(Id("a"),IntType()),VarDecl(Id("b"),IntType())]))
        self.assertTrue(TestAST.test(input,expect,4))

    def test_5(self):
        input = """
            var a: array [1 .. 2] of integer;
            """
        expect = str(Program([VarDecl(Id("a"),ArrayType(1,2,IntType()))])) 
        self.assertTrue(TestAST.test(input,expect,5))

    def test_6(self):
        input = """
            var a,b: array [1 .. 2] of integer;
            """
        expect = str(Program([VarDecl(Id("a"),ArrayType(1,2,IntType())),VarDecl(Id("b"),ArrayType(1,2,IntType()))]))
        self.assertTrue(TestAST.test(input,expect,6))

    def test_7(self):
        input = """
            var a: array [1 .. 2] of integer;
                b: array [1 .. 2] of integer;
            """
        expect = str(Program([VarDecl(Id("a"),ArrayType(1,2,IntType())),VarDecl(Id("b"),ArrayType(1,2,IntType()))]))
        self.assertTrue(TestAST.test(input,expect,7))

    def test_8(self):
        input = """
            var a: array [1 .. 2] of integer;
            var b: array [1 .. 2] of integer;
            """
        expect = str(Program([VarDecl(Id("a"),ArrayType(1,2,IntType())),VarDecl(Id("b"),ArrayType(1,2,IntType()))]))
        self.assertTrue(TestAST.test(input,expect,8))

    def test_9(self):
        input = """
            var a: array [-1 .. 2] of integer;
            """
        expect = str(Program([VarDecl(Id("a"),ArrayType(-1,2,IntType()))]))
        self.assertTrue(TestAST.test(input,expect,9))

    def test_10(self):
        input = """
            var a: array [1 .. -2] of integer;
            """
        expect = str(Program([VarDecl(Id("a"),ArrayType(1,-2,IntType()))]))
        self.assertTrue(TestAST.test(input,expect,10))

    def test_11(self):
        input = """
            var a: array [-1 .. -2] of integer;
            """
        expect = str(Program([VarDecl(Id("a"),ArrayType(-1,-2,IntType()))]))
        self.assertTrue(TestAST.test(input,expect,11))

    def test_12(self):
        input = """
            var a: array [1 .. 2] of boolean;
            """
        expect = str(Program([VarDecl(Id("a"),ArrayType(1,2,BoolType()))]))
        self.assertTrue(TestAST.test(input,expect,12))

    def test_13(self):
        input = """
            var a: array [1 .. 2] of real;
            """
        expect = str(Program([VarDecl(Id("a"),ArrayType(1,2,FloatType()))]))
        self.assertTrue(TestAST.test(input,expect,13))

    def test_14(self):   
        input = """
            var a: array [1 .. 2] of string;
            """
        expect = str(Program([VarDecl(Id("a"),ArrayType(1,2,StringType()))])) 
        self.assertTrue(TestAST.test(input,expect,14))

    def test_15(self):   
        input = """
            procedure main();
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[],[])]))
        self.assertTrue(TestAST.test(input,expect,15))

    def test_16(self):   
        input = """
            procedure foo();
            begin end
            """
        expect = str(Program([FuncDecl(Id("foo"),[],[],[])]))
        self.assertTrue(TestAST.test(input,expect,16))

    def test_17(self):   
        input = """
            procedure main();
            var a:integer;
            begin
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),IntType())],[])]))
        self.assertTrue(TestAST.test(input,expect,17))

    def test_18(self):   
        input = """
            procedure main();
            var b:real;
            begin 
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("b"),FloatType())],[])]))
        self.assertTrue(TestAST.test(input,expect,18))

    def test_19(self):   
        input = """
            procedure main();
            var a:string;
            begin 
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),StringType())],[])]))   
        self.assertTrue(TestAST.test(input,expect,19))

    def test_20(self):   
        input = """
            procedure main();
            var a:boolean;
            begin 
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),BoolType())],[])]))  
        self.assertTrue(TestAST.test(input,expect,20))

    def test_21(self):   
        input = """
            procedure main();
            var a,b:integer;
            begin 
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),IntType()),VarDecl(Id("b"),IntType())],[])]))
        self.assertTrue(TestAST.test(input,expect,21))

    def test_22(self):   
        input = """
            procedure main();
            var a,b:real;
            begin 
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),FloatType()),VarDecl(Id("b"),FloatType())],[])])) 
        self.assertTrue(TestAST.test(input,expect,22))

    def test_23(self):   
        input = """
            procedure main();
            var a,b:string;
            begin 
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),StringType()),VarDecl(Id("b"),StringType())],[])]))
        self.assertTrue(TestAST.test(input,expect,23))

    def test_24(self):   
        input = """
            procedure main();
            var a,b:boolean;
            begin 
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),BoolType()),VarDecl(Id("b"),BoolType())],[])])) 
        self.assertTrue(TestAST.test(input,expect,24))

    def test_25(self):   
        input = """
            procedure main();
            var a:array [1 .. 2] of integer;
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),ArrayType(1,2,IntType()))],[])]))
        self.assertTrue(TestAST.test(input,expect,25))

    def test_26(self):   
        input = """
            procedure main();
            var a:array [1 .. 2] of string;
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),ArrayType(1,2,StringType()))],[])]))
        self.assertTrue(TestAST.test(input,expect,26))

    def test_27(self):   
        input = """
            procedure main();
            var a:array [1 .. 2] of real;
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),ArrayType(1,2,FloatType()))],[])]))
        self.assertTrue(TestAST.test(input,expect,27))

    def test_28(self):   
        input = """
            procedure main();
            var a:array [1 .. 2] of boolean;
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),ArrayType(1,2,BoolType()))],[])]))
        self.assertTrue(TestAST.test(input,expect,28))

    def test_29(self):   
        input = """
            procedure main();
            var a:array [-1 .. 2] of integer;
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),ArrayType(-1,2,IntType()))],[])])) 
        self.assertTrue(TestAST.test(input,expect,29))

    def test_30(self):   
        input = """
            procedure main();
            var a:array [1 .. -2] of integer;
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),ArrayType(1,-2,IntType()))],[])]))
        self.assertTrue(TestAST.test(input,expect,30))

    def test_31(self):   
        input = """
            procedure main();
            var a,b:array [1 .. 2] of integer;
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),ArrayType(1,2,IntType())),VarDecl(Id("b"),ArrayType(1,2,IntType()))],[])])) 
        self.assertTrue(TestAST.test(input,expect,31))

    def test_32(self):   
        input = """
            procedure main();
            var a:array [1 .. 2] of integer; b:array [1 .. 2] of integer;
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[VarDecl(Id("a"),ArrayType(1,2,IntType())),VarDecl(Id("b"),ArrayType(1,2,IntType()))],[])]))
        self.assertTrue(TestAST.test(input,expect,32))

    def test_33(self):   
        input = """
            procedure main(a:integer);
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[VarDecl(Id("a"),IntType())],[],[])]))
        self.assertTrue(TestAST.test(input,expect,33))

    def test_34(self):   
        input = """
            procedure main(a:real);
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[VarDecl(Id("a"),FloatType())],[],[])]))
        self.assertTrue(TestAST.test(input,expect,34))

    def test_35(self):   
        input = """
            procedure main(a:string);
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[VarDecl(Id("a"),StringType())],[],[])]))  
        self.assertTrue(TestAST.test(input,expect,35))

    def test_36(self):   
        input = """
            procedure main(a:boolean);
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[VarDecl(Id("a"),BoolType())],[],[])])) 
        self.assertTrue(TestAST.test(input,expect,36))

    def test_37(self):   
        input = """
            procedure main(a,b:integer);
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[VarDecl(Id("a"),IntType()),VarDecl(Id("b"),IntType())],[],[])]))
        self.assertTrue(TestAST.test(input,expect,37))

    def test_38(self):   
        input = """
            procedure main(a:integer;b:integer);
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[VarDecl(Id("a"),IntType()),VarDecl(Id("b"),IntType())],[],[])]))
        self.assertTrue(TestAST.test(input,expect,38))

    def test_39(self):  
        input = """
            procedure main(a:array [1 .. 2] of integer);
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[VarDecl(Id("a"),ArrayType(1,2,IntType()))],[],[])]))
        self.assertTrue(TestAST.test(input,expect,39))

    def test_40(self):   
        input = """
            procedure main(a:array [1 .. -2] of integer);
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[VarDecl(Id("a"),ArrayType(1,-2,IntType()))],[],[])]))
        self.assertTrue(TestAST.test(input,expect,40))

    def test_41(self):   
        input = """
            procedure main(a,b:array [-1 .. -2] of integer);
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[VarDecl(Id("a"),ArrayType(-1,-2,IntType())),VarDecl(Id("b"),ArrayType(-1,-2,IntType()))],[],[])]))
        self.assertTrue(TestAST.test(input,expect,41))

    def test_42(self):   
        input = """
            procedure main(a:array [1 .. 2] of integer;b:array [-1 .. -2] of integer);
            begin end
            """
        expect = str(Program([FuncDecl(Id("main"),[VarDecl(Id("a"),ArrayType(1,2,IntType())),VarDecl(Id("b"),ArrayType(-1,-2,IntType()))],[],[])]))
        self.assertTrue(TestAST.test(input,expect,42))

    def test_43(self):   
        input = """
            procedure main();
            begin 
                continue;
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[],[Continue()])])) 
        self.assertTrue(TestAST.test(input,expect,43))

    def test_44(self):   
        input = """
            procedure main();
            begin 
                break;
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[],[Break()])])) 
        self.assertTrue(TestAST.test(input,expect,44))

    def test_45(self):   
        input = """
            procedure main();
            begin 
                break;
                break;
                break;
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[],[Break(),Break(),Break()])]))
        self.assertTrue(TestAST.test(input,expect,45))

    def test_46(self):   
        input = """
            procedure main();
            begin 
                a := 1;
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[],[Assign(Id("a"),IntLiteral(1))])]))  
        self.assertTrue(TestAST.test(input,expect,46))

    def test_47(self):   
        input = """
            procedure main();
            begin 
                a := b;
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[],[Assign(Id("a"),Id("b"))])]))
        self.assertTrue(TestAST.test(input,expect,47))

    def test_48(self):
        input = """
            procedure main();
            begin 
                a := b := c;
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[],[Assign(Id("b"),Id("c")),Assign(Id("a"),Id("b"))])]))
        self.assertTrue(TestAST.test(input,expect,48))

    def test_49(self):   
        input = """
            procedure main();
            begin 
                a[b] := 1;
            end
            """
        expect = str(Program([FuncDecl(Id("main"),[],[],[Assign(ArrayCell(Id("a"),Id("b")),IntLiteral(1))])]))
        self.assertTrue(TestAST.test(input,expect,49))

    def test_50(self):   
        input = """
            var a:integer;
            procedure main();
            begin end
            """
        expect = str(Program([VarDecl(Id("a"),IntType()),FuncDecl(Id("main"),[],[],[])]))
        self.assertTrue(TestAST.test(input,expect,50))

    def test_51(self):   
        input = """
            var a:integer;
            procedure main();
            begin end
            var a:integer;
            var a:integer;
            """
        expect = str(Program([VarDecl(Id("a"),IntType()),FuncDecl(Id("main"),[],[],[]),VarDecl(Id("a"), IntType()),VarDecl(Id("a"), IntType())]))
        self.assertTrue(TestAST.test(input,expect,51))

    def test_52(self):   
        input = """procedure main() begin a:=b:=c; end """
        expect = str(Program([FuncDecl(Id("main"),[],[],[Assign(Id("b"),Id("c")),Assign(Id("a"),Id("b"))])]))
        self.assertTrue(TestAST.test(input,expect,52))

    def test_53(self):   
        input = """procedure main() begin a:=1; end   """
        expect = str(Program([FuncDecl(Id("main"),[],[],[Assign(Id("a"),IntLiteral(1))])]))
        self.assertTrue(TestAST.test(input,expect,53))

    def test_54(self):
        input = """procedure main() begin a:=1.1e11; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), FloatLiteral(1.1e11))])]))
        self.assertTrue(TestAST.test(input,expect,54))

    def test_55(self):
        input = """procedure main() begin a:=True; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BooleanLiteral(True))])]))
        self.assertTrue(TestAST.test(input,expect,55))

    def test_56(self):
        input = """procedure main() begin a:="string"; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), StringLiteral("string"))])]))
        self.assertTrue(TestAST.test(input,expect,56))

    def test_57(self):
        input = """procedure main() begin a:=1+1; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("+",IntLiteral(1),IntLiteral(1)))])]))
        self.assertTrue(TestAST.test(input,expect,57))

    def test_58(self):
        input = """procedure main() begin a:=1.1 + 2.2; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("+",FloatLiteral(1.1),FloatLiteral(2.2)))])]))
        self.assertTrue(TestAST.test(input,expect,58))

    def test_59(self):
        input = """procedure main() begin a:=True or False; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("or",BooleanLiteral(True),BooleanLiteral(False)))])]))
        self.assertTrue(TestAST.test(input,expect,59))

    def test_60(self):
        input = """procedure main() begin a:="strin"+"g"; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("+",StringLiteral("strin"),StringLiteral("g")))])]))
        self.assertTrue(TestAST.test(input,expect,60))

    def test_61(self):
        input = """procedure main() begin a:=1+1.1; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("+",IntLiteral(1),FloatLiteral(1.1)))])]))
        self.assertTrue(TestAST.test(input,expect,61))

    def test_62(self):   
        input = """procedure main() begin a:=1+True; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("+",IntLiteral(1),BooleanLiteral(True)))])]))
        self.assertTrue(TestAST.test(input,expect,62))

    def test_63(self):   
        input = """procedure main() begin a:=1+"string"; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("+",IntLiteral(1),StringLiteral("string")))])]))
        self.assertTrue(TestAST.test(input,expect,63))

    def test_64(self):   
        input = """procedure main() begin a:=1+a; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("+",IntLiteral(1),Id("a")))])]))
        self.assertTrue(TestAST.test(input,expect,64))

    def test_65(self):   
        input = """procedure main() begin a:=True+1.1; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("+",BooleanLiteral(True),FloatLiteral(1.1)))])]))
        self.assertTrue(TestAST.test(input,expect,65))

    def test_66(self):   
        input = """procedure main() begin a:="string"+1.1; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("+",StringLiteral("string"),FloatLiteral(1.1)))])]))
        self.assertTrue(TestAST.test(input,expect,66))

    def test_67(self):   
        input = """procedure main() begin a:="string"+True; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("+",StringLiteral("string"),BooleanLiteral(True)))])]))
        self.assertTrue(TestAST.test(input,expect,67))

    def test_68(self):   
        input = """procedure main() begin a:="string"+a; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), BinaryOp("+",StringLiteral("string"),Id("a")))])]))
        self.assertTrue(TestAST.test(input,expect,68))

    def test_69(self):   
        input = """procedure main() begin a:=a[1]; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), ArrayCell(Id("a"),IntLiteral(1)))])]))
        self.assertTrue(TestAST.test(input,expect,69))

    def test_70(self):   
        input = """procedure main() begin a:=a[1][1]; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), ArrayCell(ArrayCell(Id("a"),IntLiteral(1)),IntLiteral(1)))])]))
        self.assertTrue(TestAST.test(input,expect,70))

    def test_71(self):   
        input = """procedure main() begin a:=a(); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), CallExpr(Id("a"),[]))])]))
        self.assertTrue(TestAST.test(input,expect,71))

    def test_72(self):   
        input = """procedure main() begin a:=a(1); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), CallExpr(Id("a"),[IntLiteral(1)]))])]))
        self.assertTrue(TestAST.test(input,expect,72))

    def test_73(self):   
        input = """procedure main() begin a:=a(1, 2); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), CallExpr(Id("a"),[IntLiteral(1), IntLiteral(2)]))])]))
        self.assertTrue(TestAST.test(input,expect,73))

    def test_74(self):   
        input = """procedure main() begin a:=a(1.1, a[1]); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), CallExpr(Id("a"),[FloatLiteral(1.1), ArrayCell(Id("a"),IntLiteral(1))]))])]))
        self.assertTrue(TestAST.test(input,expect,74))

    def test_75(self):   
        input = """procedure main() begin a:=a(a(a())); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Assign(Id("a"), CallExpr(Id("a"),[CallExpr(Id("a"),[CallExpr(Id("a"),[])])]))])]))
        self.assertTrue(TestAST.test(input,expect,75))

    def test_76(self):   
        input = """procedure main() begin a(); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [CallStmt(Id("a"),[])])]))
        self.assertTrue(TestAST.test(input,expect,76))

    def test_77(self):   
        input = """procedure main() begin a(a()); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [CallStmt(Id("a"),[CallExpr(Id("a"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,77))

    def test_78(self):   
        input = """procedure main() begin Break; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Break()])]))
        self.assertTrue(TestAST.test(input,expect,78))

    def test_79(self):   
        input = """procedure main() begin Continue; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Continue()])]))
        self.assertTrue(TestAST.test(input,expect,79))

    def test_80(self):   
        input = """procedure main() begin Return; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Return(None)])]))
        self.assertTrue(TestAST.test(input,expect,80))

    def test_81(self):   
        input = """procedure main() begin Return a; end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Return(Id("a"))])]))
        self.assertTrue(TestAST.test(input,expect,81))

    def test_82(self):   
        input = """procedure main() begin Return(a + b); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [Return(BinaryOp("+",Id("a"),Id("b")))])]))
        self.assertTrue(TestAST.test(input,expect,82))

    def test_83(self):   
        input = """procedure main() begin if a>b then a(); else b(); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [If(BinaryOp(">",Id("a"),Id("b")),[CallStmt(Id("a"),[])],[CallStmt(Id("b"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,83))

    def test_84(self):   
        input = """procedure main() begin if a>b then a(); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [If(BinaryOp(">",Id("a"),Id("b")),[CallStmt(Id("a"),[])],[])])]))
        self.assertTrue(TestAST.test(input,expect,84))

    def test_85(self):   
        input = """procedure main() begin if a>b then begin a(); end end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [If(BinaryOp(">",Id("a"),Id("b")),[CallStmt(Id("a"),[])],[])])]))
        self.assertTrue(TestAST.test(input,expect,85))

    def test_86(self):   
        input = """procedure main() begin if a>b then begin end end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [If(BinaryOp(">",Id("a"),Id("b")),[],[])])]))
        self.assertTrue(TestAST.test(input,expect,86))

    def test_87(self):   
        input = """procedure main() begin if a>b then Begin a(); b(); end end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [If(BinaryOp(">",Id("a"),Id("b")),[CallStmt(Id("a"),[]),CallStmt(Id("b"),[])],[])])]))
        self.assertTrue(TestAST.test(input,expect,87))

    def test_88(self):
        input = """procedure main() begin for i:=1 to 2 do a(); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [For(Id("i"),IntLiteral(1),IntLiteral(2),True,[CallStmt(Id("a"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,88))

    def test_89(self):   
        input = """procedure main() begin for i:=1 to 2 do begin a(); end end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [For(Id("i"),IntLiteral(1),IntLiteral(2),True,[CallStmt(Id("a"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,89))

    def test_90(self):   
        input = """procedure main() begin for i:=1 to 2 do begin end end   """
        expect = str(Program([FuncDecl(Id("main"),[],[],[For(Id("i"),IntLiteral(1),IntLiteral(2),True,[])])]))
        self.assertTrue(TestAST.test(input,expect,90))

    def test_91(self):   
        input = """procedure main() begin for i:=1 to 2 do begin a(); b(); end end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [For(Id("i"),IntLiteral(1),IntLiteral(2),True,[CallStmt(Id("a"),[]), CallStmt(Id("b"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,91))

    def test_92(self):   
        input = """procedure main() begin for i:=1 downto 2 do begin a(); b(); end end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [For(Id("i"),IntLiteral(1),IntLiteral(2),False,[CallStmt(Id("a"),[]), CallStmt(Id("b"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,92))

    def test_93(self):   
        input = """procedure main() begin While a>b do a(); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [While(BinaryOp(">",Id("a"),Id("b")),[CallStmt(Id("a"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,93))

    def test_94(self):   
        input = """procedure main() begin While a>b do begin a(); end end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [While(BinaryOp(">",Id("a"),Id("b")),[CallStmt(Id("a"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,94))

    def test_95(self):   
        input = """procedure main() begin While a>b do  begin a(); b(); end end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [While(BinaryOp(">",Id("a"),Id("b")),[CallStmt(Id("a"),[]), CallStmt(Id("b"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,95))

    def test_96(self):  
        input = """procedure main() begin with a: integer; do a(); end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [With([VarDecl(Id("a"),IntType())],[CallStmt(Id("a"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,96))

    def test_97(self):   
        input = """procedure main() begin with a: integer; do begin a(); end end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [With([VarDecl(Id("a"),IntType())],[CallStmt(Id("a"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,97))

    def test_98(self):   
        input = """procedure main() begin with a: integer; do begin a(); b(); end end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [With([VarDecl(Id("a"),IntType())],[CallStmt(Id("a"),[]), CallStmt(Id("b"),[])])])]))
        self.assertTrue(TestAST.test(input,expect,98))

    def test_99(self):   
        input = """procedure main() begin with a: integer; do begin end end   """
        expect = str(Program([FuncDecl(Id("main"), [], [], [With([VarDecl(Id("a"),IntType())],[])])]))
        self.assertTrue(TestAST.test(input,expect,99))

    def test_100(self):   
        input = """  var haha: string; """
        expect = str(Program([VarDecl(Id("haha"),StringType())]))
        self.assertTrue(TestAST.test(input,expect,100))
from MPVisitor import MPVisitor
from MPParser import MPParser
from AST import *
from functools import reduce

class ASTGeneration(MPVisitor):
    def visitProgram(self, ctx:MPParser.ProgramContext):
        return Program([self.visit(x) for x in ctx.manydeclares()])

    def visitManydeclares(self, ctx:MPParser.manydeclares):
        if ctx.vardecls():
            return self.visit(ctx.vardecls())
        elif ctx.funcdeclare():
            return self.visit(ctx.funcdeclare())


    def visitVarDecls(self, ctx:MPParser.VardeclsContext):
        if ctx.getChildCount()==3:
            return self.visit(ctx.ID().getText())
        else:
            return [self.visit(x) for x in ctx.vardecl()]

    def visitVarDecl(self, ctx:MPParser.VardeclContext):
        return VarDecl(self.visit(ctx.ID().getText()),self.visit(ctx.r_type()))

    def visitR_type(self,ctx:MPParser.R_typeContext):
             if ctx.INTTYPE():
                return IntType()
             elif ctx.STRINGTYPE():
                return Stringtype()
             elif ctx.FLOATTYPE():
                return FloatType()
             elif ctx.BOOLEANTYPE():
                return BoolType()

    def visitFuncDecl(self, ctx:MPParser.funcdeclare):
        return FuncDecl(self.visit(ctx.ID().getText()),self.visit(ctx.paralist())
        ,[self.visit(x) for x in ctx.vardecls()],self.visit(ctx.compoundstatement()),self.visit(ctx.r_type()))

    def visitParalist(self,ctx:MPParser.paralist):
        return [self.visit(x) for x in ctx.paradeclare()] if ctx.paradeclare() else []
    
    def visitParadeclare(self,ctx:MPParser.paradeclare):
        tl=ctx.parameter()[::-1]
        ol=ctx.SEMI()[::-1]
        zl=zip(tl[1::],ol)
        return reduce(lambda x,y:Binary(y[1].getText(),self.visit(y[0]),x),zl,self.visit(tl[0]))
    
    def visitParameter(self,ctx:MPParser.parameter):
        return BinaryOp(ctx.COLON().getText(),ctx.idlist(),ctx.r_type())

    def visitIdlist(self,ctx:MPParser.idlist):
        tl=ctx.ID()
        ol=ctx.COMMA()
        zl=zip(tl[1::],ol)
        return reduce(lambda x,y:Binary(y[1].getText(),x,self.visit(y[0])),zl,self.visit(tl[0]))    

    def visitIntType(self, param):
        return IntType()


    def visitFloatType(self, param):
        return FloatType()


    def visitBoolType(self, param):
        return BoolType()


    def visitStringType(self, param):
        return Stringtype()


    def visitVoidType(self, param):
        return VoidType()


    def visitArrayType(self,ctx:MPParser.ArraytypeContext):
        return ArrayType(self.visit(ctx.expression()),
         self.visit(ctx.expression()),self.visit(ctx.simpletype()))


    def visitBinaryOp(self, param):
        pass

    def visitUnaryOp(self, param):
        pass

    def visitCallExpr(self, param):
        pass


    def visitId(self, param):
        pass


    def visitArrayCell(self, param):
        pass


    def visitAssign(self, param):
        pass


    def visitWith(self, param):
        pass


    def visitIf(self, param):
        pass


    def visitFor(self, param):
        pass


    def visitContinue(self, param):
        pass


    def visitBreak(self, param):
        pass


    def visitReturn(self, param):
        pass


    def visitWhile(self, param):
        pass


    def visitCallStmt(self, param):
        pass


    def visitIntLiteral(self, param):
        pass


    def visitFloatLiteral(self, param):
        pass


    def visitBooleanLiteral(self, param):
        pass

    def visitStringLiteral(self, param):
        pass

/*grammar MP;

@lexer::header {
from lexererr import *
}

options{
	language=Python3;
}

program  : decl+ EOF;

decl: funcdecl | procdecl;

procdecl: PROCEDURE ID LB RB SEMI body; 

funcdecl: FUNCTION ID LB RB COLON mtype SEMI body;

body: BEGIN stmt* END  ;

stmt: funcall SEMI;

funcall: ID LB exp? RB ;

exp: INTLIT ;

mtype: INTTYPE;

INTLIT: [0-9]+ ;

LB: '(' ;

RB: ')' ;

SEMI: ';' ;

COLON: ':' ;

WS : [ \t\r\n]+ -> skip ; // skip spaces, tabs, newlines

PROCEDURE: P R O C E D U R E;

FUNCTION: F U N C T I O N;

BEGIN: B E G I N;

END: E N D;

INTTYPE: I N T E G E R;

ID: [a-zA-Z]+ ;

fragment A : [aA];
fragment B : [bB];
fragment C : [cC];
fragment D : [dD];
fragment E : [eE];
fragment F : [fF];
fragment G : [gG];
fragment H : [hH];
fragment I : [iI];
fragment J : [jJ];
fragment K : [kK];
fragment L : [lL];
fragment M : [mM];
fragment N : [nN];
fragment O : [oO];
fragment P : [pP];
fragment Q : [qQ];
fragment R : [rR];
fragment S : [sS];
fragment T : [tT];
fragment U : [uU];
fragment V : [vV];
fragment W : [wW];
fragment X : [xX];
fragment Y : [yY];
fragment Z : [zZ];

ERROR_CHAR: .;
*/

/*
ID 1652606
*/
grammar MP;

@lexer::header {

from lexererr import *
}

options{
	language=Python3;
}

program  :manydeclares+ EOF;
manydeclares: vardecls|funcdeclare|procdeclare|arraytype|statement;
expresslist: expression (COMMA expression)*| expression?;
idlist: ID (COMMA ID)*;
vardecls: VARTYPE vardecl+ | VARTYPE ID SEMI;
vardecl: idlist COLON r_type SEMI;
//r_type: r_type | arraytype;
r_type:INTTYPE | STRINGTYPE | FLOATTYPE| BOOLEANTYPE;
arraytype: ARRAY LSB indexrange RSB OF r_type;
indexrange : expression DD expression;

funcdeclare: FUNCTION ID LB paralist RB COLON r_type SEMI vardecls * compoundstatement;
//funcall2: ID LB paralist RB COLON returntype SEMI;
//test2:VARTYPE idlist COLON r_type compoundstatement? returnstate1? SEMI;
paralist: paradeclare?;
paradeclare: parameter (SEMI parameter)*;
parameter:  idlist COLON r_type;
compoundstatement: BEGIN statement* END;
//returntype: r_type|arraytype;

procdeclare: PROCEDURE ID LB paralist RB SEMI vardecl* compoundstatement;
//test :VARTYPE idlist COLON r_type compoundstatement? returnstate2? SEMI;

//keyword : STRINGTYPE | FLOATTYPE | BOOLEANTYPE | ARRAY | VARTYPE | BREAK | CONTINUE | FOR | TO | IF | THEN | ELSE | RETURN | WHILE | TRUE | FALSE | OF | REALTYPE | INTEGER | DOWNTO | FUNCTION | BEGIN | END | PROCEDURE | AND | OR | MOD | DIV;

index_exp: ID (LB indexpress* RB)? LT indexpress RT;

expression: expression2 | index_exp | invocate_express;
expression2:expression2 ('AND THEN' | 'OR ELSE') express1 | express1;

express1: express2 EQUALS express2 | express2 LR express2 | express2 LT express2	| express2 LE express2	| express2 RT express2	| express2 RE express2	| express2;

express2: express2 PLUS express3	| express2 MINUS express3	| express2 OR express3	| express3;

express3: express3 DIVIDE express4	| express3 MULT express4	| express3 DIV express4	| express3 MOD express4	| express3 AND express4	| express4;

express4: express5 MINUS express4	| express5 NOT express4;

express5: LSB expression RSB| lit | ID | funcdeclare;

indexpress: indexpress PLUS indexpress1 | indexpress MINUS indexpress1 | indexpress1;

indexpress1: indexpress1 DIVIDE indexpress2	| indexpress1 MULT indexpress2	| indexpress1 DIV indexpress2	| indexpress1 MOD indexpress2	| indexpress2;

indexpress2: LB indexpress RB	| ID LT indexpress RT	| INTLIT | ID;

invocate_express: ID LB expresslist RB;

statement:assignstate|ifstate|whilestate|forstate|compoundstatement|withstate|returnstate1|returnstate2|callstate;

assignstate: lhslist SEMI;
lhslist : var ASSIGN assignstate | var ASSIGN expression ;
var: ID| index_exp;
//arrayele:ID LSB INTLIT RSB;
//funcele: ID LB paralist RB LSB INTLIT RSB;

ifstate: ifstate1|ifstate2;
ifstate1: expression THEN statement ELSE statement ;
ifstate2:expression THEN statement ;
//boolexpression: var COMPARE var ;

whilestate: WHILE expression DO statement  breakstate? continuestate? SEMI;

forstate: FOR ID ASSIGN expression (TO|DOWNTO) expression DO statement breakstate? continuestate? SEMI;

breakstate: BREAK SEMI;

continuestate: CONTINUE SEMI;

returnstate1: RETURN expression SEMI;
returnstate2: RETURN SEMI;
callstate: ID LB expresslist RB SEMI;
withstate: WITH vardecllist DO statement;


vardecllist: vardecl1 (SEMI vardecl1)*;
vardecl1: idlist COLON (r_type|arraytype);

funcall2: ID LB decl* RB ;
decl: expression (COMMA expression)*;
//mainproc: PROCEDURE 'main' '{' program '}';


//code end here
INTTYPE: I N T E G E R  ;

VOIDTYPE: 'void'  ;


INTLIT: [0-9]+;

LB: '(' ;
RB: ')' ;

LP: '{';

RP: '}';

SEMI: ';' ;
//code start here
fragment A:('a'|'A');
fragment B:('b'|'B');
fragment C:('c'|'C');
fragment D:('d'|'D');
fragment E:('e'|'E');
fragment F:('f'|'F');
fragment G:('g'|'G');
fragment H:('h'|'H');
fragment I:('i'|'I');
fragment J:('j'|'J');
fragment K:('k'|'K');
fragment L:('l'|'L');
fragment M:('m'|'M');
fragment N:('n'|'N');
fragment O:('o'|'O');
fragment P:('p'|'P');
fragment Q:('q'|'Q');
fragment R:('r'|'R');
fragment S:('s'|'S');
fragment T:('t'|'T');
fragment U:('u'|'U');
fragment V:('v'|'V');
fragment W:('w'|'W');
fragment X:('x'|'X');
fragment Y:('y'|'Y');
fragment Z:('z'|'Z');
fragment NEWLINE   : '\r' '\n' | '\n' | '\r';

PLUS : '+';
MINUS : '-';
DIVIDE: '/';
DIV: D I V;
MOD: M O D;
NOT: N O T ;
OR:O R;
AND:A N D ;
MULT : '*';
EQUALS : '=';
ASSIGN:':=';
RT : '>';
LT : '<';
LE : '<=';
RE : '>=';
LR : '<>';
COMMA: ',';
COLON : ':';
LSB:'[';
RSB:']';
DD:'..';
COMPARE: RT|LT|LE|RE|LR|EQUALS;
VARTYPE: V A R ;
STRINGTYPE:S T R I N G;
FLOATTYPE:F L O A T ;
BOOLEANTYPE:B O O L E A N ;
ARRAY:A R R A Y ;
BREAK:B R E A K ;
CONTINUE:C O N T I N U E ;
FOR:F O R ;
TO:T O ;
IF:I F ;
THEN:T H E N ;
ELSE:E L S E ;
RETURN:R E T U R N ;
WHILE:W H I L E ;
TRUE:T R U E ;
FALSE:F A L S E ;
OF :O F ;
REALTYPE:R E A L ;
INTEGER: I N T E G E R ;
DOWNTO:D O W N T O;
WITH: W I T H;
DO:D O;


FUNCTION:F U N C T I O N ;
BEGIN:B E G I N ;
END:E N D ;
PROCEDURE:P R O C E D U R E ;
lit: INTLIT | FLOATLIT | BOOLIT | STRINGLIT;
FLOATLIT: MINUS? INTLIT+ '.' INTLIT* EXPO? | MINUS? '.' INTLIT+ EXPO? | MINUS? INTLIT+ EXPO;
fragment EXPO : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
BOOLIT:TRUE|FALSE;

STRINGLIT: '"' CHARS? '"';
fragment CHARS: CHAR+;
fragment CHAR:~[\b\f\r\t\n"\\]|ESCAPE;
fragment ESCAPE:'\\' [bfrnt"'\\];


REALLIT: FLOATLIT PLUS (FLOATLIT 'i');
HEX: '0'X[0-9A-Fa-f]+;
BLOCK:'(*' .*? '*)' -> skip;
BLOCK2: '{' .*? '}' ->skip;
LINE: '//' ~ [\r\n]* -> skip;

ID: [a-zA-Z_][a-zA-Z0-9_]* ;

WS : [ \t\r\n]+ -> skip ; // skip spaces, tabs, newlines


ERROR_CHAR: . {raise ErrorToken(self.text)} ;
UNCLOSE_STRING: . {raise ErrorToken(self.text)} ; 
ILLEGAL_ESCAPE: . {raise ErrorToken(self.text)} ;

